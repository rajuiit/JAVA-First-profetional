/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * dailyReportIF.java
 *
 * Created on Mar 29, 2013, 11:44:53 AM
 */
package Report;

import Database.DBConnection;
import chart.LineChartDemo6;
import com.itextpdf.text.Document;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.DefaultCategoryDataset;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author ProBook
 */
public class dailyReportIF extends javax.swing.JInternalFrame {

    /** Creates new form dailyReportIF */
    public dailyReportIF() {
        initComponents();
        setValueToCB();
        showDailyReport();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        searchPanel = new javax.swing.JPanel();
        dayCB = new javax.swing.JComboBox();
        monthCB = new javax.swing.JComboBox();
        yearCB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        printButton = new javax.swing.JButton();
        interactiveCheck = new javax.swing.JCheckBox();
        backgroundCheck = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        seeGraph = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTA = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Daily Report");

        jDesktopPane1.setBackground(new java.awt.Color(240, 240, 240));

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        dayCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        dayCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dayCBItemStateChanged(evt);
            }
        });
        dayCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayCBActionPerformed(evt);
            }
        });

        monthCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "October", "November", "December" }));
        monthCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthCBItemStateChanged(evt);
            }
        });

        yearCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        yearCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearCBItemStateChanged(evt);
            }
        });

        jLabel1.setText("Date: ");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(dayCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(monthCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(yearCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(764, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dayCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        searchPanel.setBounds(10, 10, 1030, 60);
        jDesktopPane1.add(searchPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        interactiveCheck.setSelected(true);
        interactiveCheck.setText("Show Progress Dialog");

        backgroundCheck.setSelected(true);
        backgroundCheck.setText("Print in Background");

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cancel.PNG"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        seeGraph.setText("Graph");
        seeGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(seeGraph)
                .addGap(324, 324, 324)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interactiveCheck)
                    .addComponent(backgroundCheck))
                .addGap(54, 54, 54)
                .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152)
                .addComponent(cancelButton)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(printButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(interactiveCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(backgroundCheck))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(seeGraph)
                .addContainerGap())
        );

        jPanel3.setBounds(10, 480, 1030, 70);
        jDesktopPane1.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        reportTA.setColumns(20);
        reportTA.setEditable(false);
        reportTA.setRows(5);
        jScrollPane1.setViewportView(reportTA);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1018, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );

        jPanel2.setBounds(10, 80, 1030, 390);
        jDesktopPane1.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1047, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dayCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dayCBItemStateChanged
        // TODO add your handling code here:
        showDailyReport();
    }//GEN-LAST:event_dayCBItemStateChanged

    private void monthCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthCBItemStateChanged
        // TODO add your handling code here:
        showDailyReport();
    }//GEN-LAST:event_monthCBItemStateChanged

    private void yearCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearCBItemStateChanged
        // TODO add your handling code here:
        showDailyReport();
    }//GEN-LAST:event_yearCBItemStateChanged

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
        MessageFormat header = createFormat("Daily Report");
        MessageFormat footer = createFormat("Page no - ");
        boolean interactive = interactiveCheck.isSelected();
        boolean background = backgroundCheck.isSelected();

        PrintingTask task = new PrintingTask(header, footer, interactive);
        if (background) {
            task.execute();
        } else {
            task.run();
        }

    }//GEN-LAST:event_printButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void seeGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeGraphActionPerformed
        // TODO add your handling code here:
        String day1 = dayCB.getSelectedItem().toString();
        int month1 = monthCB.getSelectedIndex() + 1;
        String year1 = yearCB.getSelectedItem().toString();
        String full = year1 + "-" + month1 + "-" + day1 + " 00:00:00";
        String full1 = year1 + "-" + month1 + "-" + day1 + " 23:59:59";

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try {
            Connection con = DBConnection.getDBConnection();
            Statement st = con.createStatement();
            try {

                ResultSet rs = st.executeQuery("SELECT productId,productName,productPrice,sum(quantity),sum(amount),showDate FROM sale_return where showDate BETWEEN '" + full + "' and '" + full1 + "' group by productId");
                while (rs.next()) {
                    dataset.setValue(Integer.parseInt(rs.getString(4)), "Quantity", rs.getString(2));

                }
                con.close();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Invalid username or password", "Invalid", JOptionPane.ERROR_MESSAGE);

            }//inner try catch closed
        } catch (Exception x) {
            JOptionPane.showMessageDialog(null, "Unable to connect to the database", "Connection error", JOptionPane.ERROR_MESSAGE);
        }//outer try catch closed


        //end


//        dataset.setValue(7, "Marks", "Vinod");
//	dataset.setValue(4, "Marks", "Deepak");
//	dataset.setValue(9, "Marks", "Prashant");
//	dataset.setValue(6, "Marks", "Chandan");
        JFreeChart chart = ChartFactory.createBarChart("Daily Report Chart. Date: "+ full, "Product Name", "Quantity", dataset, PlotOrientation.VERTICAL, false, true, false);

        chart.setBackgroundPaint(Color.yellow);
        chart.getTitle().setPaint(Color.blue);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.red);
        ChartFrame frame1 = new ChartFrame("Daily Report Chartt", chart);
        frame1.setVisible(true);
        frame1.setSize(400, 350);
    }//GEN-LAST:event_seeGraphActionPerformed

    private void dayCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dayCBActionPerformed
    private class PrintingTask extends SwingWorker<Object, Object> {

        private final MessageFormat headerFormat;
        private final MessageFormat footerFormat;
        private final boolean interactive;
        private volatile boolean complete = false;
        private volatile String message;

        public PrintingTask(MessageFormat header, MessageFormat footer,
                boolean interactive) {
            this.headerFormat = header;
            this.footerFormat = footer;
            this.interactive = interactive;
        }

        @Override
        protected Object doInBackground() {
            try {
                complete = reportTA.print(headerFormat, footerFormat,
                        true, null, null, interactive);
                message = "Printing " + (complete ? "complete" : "canceled");
            } catch (PrinterException ex) {
                message = "Sorry, a printer error occurred";
            } catch (SecurityException ex) {
                message =
                        "Sorry, cannot access the printer due to security reasons";
            }
            return null;
        }

        @Override
        protected void done() {
            message(!complete, message);
        }
    }

    private MessageFormat createFormat(String text) {
        // String text = source.getText();
        if (text != null && text.length() > 0) {
            try {
                return new MessageFormat(text);
            } catch (IllegalArgumentException e) {
                error("Sorry, this format is invalid.");
            }
        }
        return null;
    }

    private void message(boolean error, String msg) {
        int type = (error ? JOptionPane.ERROR_MESSAGE
                : JOptionPane.INFORMATION_MESSAGE);
        JOptionPane.showMessageDialog(this, msg, "Printing", type);
    }

    private void error(String msg) {
        message(true, msg);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox backgroundCheck;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox dayCB;
    private javax.swing.JCheckBox interactiveCheck;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox monthCB;
    private javax.swing.JButton printButton;
    private javax.swing.JTextArea reportTA;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton seeGraph;
    private javax.swing.JComboBox yearCB;
    // End of variables declaration//GEN-END:variables

    private void showDailyReport() {
        String day1 = dayCB.getSelectedItem().toString();
        int month1 = monthCB.getSelectedIndex() + 1;
        String year1 = yearCB.getSelectedItem().toString();
        String full = year1 + "-" + month1 + "-" + day1 + " 00:00:00";
        String full1 = year1 + "-" + month1 + "-" + day1 + " 23:59:59";


        try {


            ResultSet rst = DBConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery("SELECT productId,productName,productPrice,sum(quantity),sum(amount),showDate FROM sale_return where showDate BETWEEN '" + full + "' and '" + full1 + "' group by productId");
            // ResultSet rst = DBConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery("SELECT * FROM sale_return where showDate BETWEEN '2013-04-03' AND '2013-04-04'");

            reportTA.setText("sale Product Information");
            reportTA.append("\n");
            reportTA.append("\t" + "Product ID \t Product Name\tProduct Price(In sell)\tTotal Quantity\t total Amount\n");
            reportTA.append("\n");
            while (rst.next()) {
                reportTA.append("\t" + rst.getString(1) + "\t" + rst.getString(2) + "\t" + rst.getString(3) + "\t\t" + rst.getString(4) + "\t" + rst.getString(5) + "\n");
                System.out.println(rst.getString(6));
            }
            if (rst != null) {
                rst.close();
            }
        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(null, " No Records found" + sqle.getMessage());
            return;
        }
        
        
        
        
        //return_sale
        
        try {


            ResultSet rsto = DBConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery("SELECT productId,productName,productPrice,sum(quantity),sum(amount),showDate FROM return_sale where showDate BETWEEN '" + full + "' and '" + full1 + "' group by productId");
            // ResultSet rst = DBConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE).executeQuery("SELECT * FROM sale_return where showDate BETWEEN '2013-04-03' AND '2013-04-04'");

            reportTA.append("Return Product Information\n");
            reportTA.append("\n");
            reportTA.append("\t" + "Product ID \t Product Name\tProduct Price(In sell)\tTotal Quantity\t total Amount\n");
            reportTA.append("\n");
            while (rsto.next()) {
                reportTA.append("\t" + rsto.getString(1) + "\t" + rsto.getString(2) + "\t" + rsto.getString(3) + "\t\t" + rsto.getString(4) + "\t" + rsto.getString(5) + "\n");
                System.out.println(rsto.getString(6));
            }
            if (rsto != null) {
                rsto.close();
            }
        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(null, " No Records found" + sqle.getMessage());
            return;
        }
    }

    private void setValueToCB() {
        Calendar dateTime = Calendar.getInstance();
        // dateTextField.setText(String.valueOf(dateTime.getTime()));
        Date dd = new Date();
        int day = dd.getDate() - 1;
        int month = dd.getMonth();
        int year = dd.getYear() - 110;
        System.out.println(year);
        dayCB.setSelectedIndex(day);
        monthCB.setSelectedIndex(month);
        yearCB.setSelectedIndex(year);
    }
}
